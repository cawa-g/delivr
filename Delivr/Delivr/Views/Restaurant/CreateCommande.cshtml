@model Delivr.Models.CreateCommandeModel

@{
    ViewBag.Title = "Confirmez votre commande";
}

<div class="jumbotron padded">
    <div class="container">
        <h2>@ViewBag.Title</h2>
        <hr />
        @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "orderForm" })) //@action = "https://www.sandbox.paypal.com/cgi-bin/webscr", 
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)
            <form class="form-horizontal">

                <div class="form-group">
                    <div class="col-sm-12">
                        <hr />
                        <h4>Date de livraison prévue</h4>
                        <hr />
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Date, new { @class = "col-sm-3 control-label" })

                    <div class="col-sm-9 input-group date" id="datetimepicker1">
                        <input class="form-control form-input text-box single-line" style="margin-bottom:0" data-val="true" data-val-date="The field Date must be a date." data-val-required="The Date field is required." id="Date" name="Date" type="datetime" value="@((DateTime.Now).ToString())">
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                        @Html.ValidationMessageFor(model => model.Date)
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <hr />
                        <h4>Entrez une nouvelle adresse de livraison</h4>
                        <hr />
                    </div>
                </div>

                <div class="form-group">
                    @(Html.LabelFor(m => m.NewAdresse.Rue, new { @class = "col-sm-3 control-label" }))
                    <div class="col-sm-9">
                        @(Html.TextBoxFor(m => m.NewAdresse.Rue, new { @class = "form-control form-input" }))
                    </div>
                </div>
                <div class="form-group">
                    @(Html.LabelFor(m => m.NewAdresse.NumeroCivique, new { @class = "col-sm-3 control-label" }))
                    <div class="col-sm-9">
                        @(Html.TextBoxFor(m => m.NewAdresse.NumeroCivique, new { @class = "form-control form-input" }))
                    </div>
                </div>
                <div class="form-group">
                    @(Html.LabelFor(m => m.NewAdresse.CodePostale, new { @class = "col-sm-3 control-label" }))
                    <div class="col-sm-9">
                        @(Html.TextBoxFor(m => m.NewAdresse.CodePostale, new { @class = "form-control form-input" }))
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <hr />
                        <h4>Ou sélectionnez une de vos adresses sauvegardées</h4>
                        <hr />
                    </div>
                </div>

                @{
                    List<SelectListItem> adresses = new List<SelectListItem>();
                    adresses.Add(new SelectListItem
                    {
                        Value = Model.AdresseDefault.AdresseId.ToString(),
                        Text = Model.AdresseDefault.NumeroCivique.ToString() + " " + Model.AdresseDefault.Rue.ToString(),
                    });
                    foreach (Delivr.Models.Adresse r in Model.Adresses)
                    {
                        adresses.Add(new SelectListItem
                        {
                            Value = r.AdresseId.ToString(),
                            Text = r.NumeroCivique.ToString() + " " + r.Rue.ToString(),
                        });
                    }
                }

                <div class="form-group">
                    <label class="col-sm-3 control-label" for="AdresseList">Adresses sauvegardées</label>
                    <div class="col-sm-9">
                        @(Html.DropDownListFor(m => m.AdresseId, (List<SelectListItem>)adresses, new { id = "AdresseList", @class = "form-control form-input" }))
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <hr />
                        <h4>Résumé de votre commande</h4>
                        <hr />
                    </div>
                </div>

                <div class="col-sm-12">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>@(Html.LabelFor(m => m.CommandeItems.First().MenuItem.Nom))</th>
                                <th>@(Html.LabelFor(m => m.CommandeItems.First().Quantite))</th>
                                <th>@(Html.LabelFor(m => m.CommandeItems.First().SousTotal))</th>
                            </tr>
                        </thead>
                        @for (var i = 0; i < Model.CommandeItems.Count; i++)
                        {

                            <tr>
                                <td>@Html.DisplayFor(m => Model.CommandeItems.ElementAt(i).MenuItem.Nom)</td>
                                <td>@Html.DisplayFor(m => Model.CommandeItems.ElementAt(i).Quantite)</td>
                                <td>@Html.DisplayFor(m => Model.CommandeItems.ElementAt(i).SousTotal)</td>
                            </tr>
                            @Html.HiddenFor(m => m.CommandeItems[i].Commande)
                            @Html.HiddenFor(m => m.CommandeItems[i].CommandeId)
                            @Html.HiddenFor(m => m.CommandeItems[i].CommandeItemId)
                            @Html.HiddenFor(m => m.CommandeItems[i].MenuItem)
                            @Html.HiddenFor(m => m.CommandeItems[i].MenuItemId)
                            @Html.HiddenFor(m => m.CommandeItems[i].Quantite)
                            @Html.HiddenFor(m => m.CommandeItems[i].SousTotal)
                        }
                    </table>
                </div>

                <div class="form-group">
                    <div class="col-sm-12">
                        <div class="btn-group btn-group-lg" role="group">
                                                        
                            <input type="hidden" name="cmd" value="_cart"> 
                            <input type="hidden" name="upload" value="1">
                            <input type="hidden" name="business" value="test-merchant@delivr.com">
                            <input type="hidden" name="no_shipping" value="1">
                            <input type="hidden" name="return" value="@Url.Action("ConfirmationCommande", "Restaurant", routeValues: null /* specify if needed */, protocol: Request.Url.Scheme /* This is the trick */)">
                            <input type="hidden" name="notify_url" value="@Url.Action("ConfirmationCommande", "Restaurant", routeValues: null /* specify if needed */, protocol: Request.Url.Scheme /* This is the trick */)">
                            <input type="hidden" name="currency_code" value="CAD" />
                            <input type="hidden" name="custom" value="" id="orderId"/>
                            @for (int i = 0; i < Model.CommandeItems.Count; i++)
                            {
                                <input type="hidden" name="@("item_name_" + (i + 1).ToString())" value="@(Model.CommandeItems[i].MenuItem.Nom)">
                                <input type="hidden" name="@("quantity_" + (i + 1).ToString())" value="@(Model.CommandeItems[i].Quantite)">
                                <input type="hidden" name="@("amount_" + (i + 1).ToString())" value="@((Model.CommandeItems[i].SousTotal/Model.CommandeItems[i].Quantite)/100.00)">
                            }

                            <div id="confirmationPopup" hidden="hidden"><h4>Votre commande a été confirmée avec succès, il ne vous reste plus qu'à payer!</h4></div>
                            <input id="confirmationBtn" type="submit" name="btnsubmit" class="btn btn-primary" value="Valider" />
                            <a class="btn btn-default" href="en/Restaurant/MenuCommande/@(Model.CommandeItems[0].MenuItem.Menu.RestaurantId)">Modifier commande</a>
                        </div>
                    </div>
                </div>
            </form>
        }
    </div>
</div>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function () {
            $('#datetimepicker1').datetimepicker({
                toolbarPlacement: 'top',
                format: 'YYYY/MM/DD HH:mm',
                allowInputToggle: true
            });
        });
        $(function () {
            $("#confirmationBtn").click(function () {
                var dataString = $('#orderForm').serialize();
                //alert (dataString);return false;
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("CreateCommande")",
                    data: dataString,
                    success: function (data) {
                        $('#orderId').prop('value', data)
                        $('#confirmationPopup').fadeIn();
                        $('#confirmationBtn').prop('value', 'Payer avec paypal!').addClass('btn-success');
                        $('#orderForm').prop('action', 'https://www.sandbox.paypal.com/cgi-bin/webscr');
                        $('#confirmationBtn').unbind();
                    }
                });
                return false;
            });
        });
    </script>
}
