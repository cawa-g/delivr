<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="About" xml:space="preserve">
    <value>Our story began with a group of four friends back in late 2003. They came up with the idea that would later become &lt;strong&gt;Delivr&lt;/strong&gt;.</value>
  </data>
  <data name="About2" xml:space="preserve">
    <value>A &lt;em&gt;true revolution&lt;/em&gt; among the restaurant industry. &lt;strong&gt;Delivr&lt;/strong&gt; brings a breath of fresh air to communities all around North America.</value>
  </data>
  <data name="About3" xml:space="preserve">
    <value>We aim to provide food delivery services and, therefore, ease of access to any restaurant within 25 miles of your home.</value>
  </data>
  <data name="AboutUs" xml:space="preserve">
    <value>About us</value>
  </data>
  <data name="Browse" xml:space="preserve">
    <value>Browse our selection</value>
  </data>
  <data name="Browse2" xml:space="preserve">
    <value>Choose from a huge selection of restaurants</value>
  </data>
  <data name="BusinessInquiries" xml:space="preserve">
    <value>Businness inquiries</value>
  </data>
  <data name="ContactUs" xml:space="preserve">
    <value>Get in touch with us!</value>
  </data>
  <data name="DeliveryPromotion" xml:space="preserve">
    <value>&lt;p&gt;Delicious &lt;strong&gt;food&lt;/strong&gt;, delivered right to your &lt;strong&gt;doorstep&lt;/strong&gt;.&lt;/p&gt;</value>
  </data>
  <data name="DeliveryTimeGuarantee" xml:space="preserve">
    <value>&lt;p&gt;All orders are delivered &lt;br /&gt; in &lt;strong&gt;under an hour&lt;/strong&gt;,&lt;br /&gt; Guaranteed!&lt;/p&gt;
&lt;p&gt;If not, you get your meal at &lt;strong&gt;no charge&lt;/strong&gt;!&lt;/p&gt;</value>
  </data>
  <data name="Enjoy" xml:space="preserve">
    <value>Bon appétit!</value>
  </data>
  <data name="Enjoy2" xml:space="preserve">
    <value>We hope you enjoy</value>
  </data>
  <data name="HowItWorks" xml:space="preserve">
    <value>How it works:</value>
  </data>
  <data name="JoinUs" xml:space="preserve">
    <value>Join our growing community &lt;br /&gt; and learn to &lt;strong&gt;stop worrying&lt;/strong&gt;.&lt;br /&gt;Sign up &lt;strong&gt;now&lt;/strong&gt;!</value>
  </data>
  <data name="OurMission" xml:space="preserve">
    <value>Our mission</value>
  </data>
  <data name="Pay" xml:space="preserve">
    <value>Pay</value>
  </data>
  <data name="Pay2" xml:space="preserve">
    <value>Either online or at the door</value>
  </data>
  <data name="PaymentMethodDoor" xml:space="preserve">
    <value>At the door</value>
  </data>
  <data name="PaymentMethodDoorDetails" xml:space="preserve">
    <value>At the door, you'll be able to use either Visa or MasterCard if you're paying credit, Interact or good old cash.</value>
  </data>
  <data name="PaymentMethodOnline" xml:space="preserve">
    <value>Online</value>
  </data>
  <data name="PaymentMethodOnlineDetails" xml:space="preserve">
    <value>We accept Visa, MasterCard, Paypal and Interact as well as any of your favorite crypto currencies.</value>
  </data>
  <data name="PaymentMethods" xml:space="preserve">
    <value>Payment methods</value>
  </data>
  <data name="Pick" xml:space="preserve">
    <value>Pick a meal</value>
  </data>
  <data name="Pick2" xml:space="preserve">
    <value>Or more!</value>
  </data>
  <data name="Support" xml:space="preserve">
    <value>Support</value>
  </data>
</root>